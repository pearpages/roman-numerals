{"version":3,"sources":["roman.ts","Input.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Helpers","number","Error","Units","string","parseInt","slice","length","Mappers","1","2","3","4","5","6","7","8","9","hasError","TEXT","Input","state","value","type","max","min","autoFocus","onChange","event","target","ms","cs","xs","is","hasInputErrors","_","getRoman","setState","this","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05638ac4.chunk.js","sourcesContent":["const Helpers = {\n  hasZeroOrBelowError: function(number: number) {\n    if (number <= 0) {\n      throw new Error(\"Negative number\");\n    }\n  },\n\n  hasUnitError: function(number: number) {\n    if (number <= 0 || number > 9) {\n      throw new Error(\"Wrong value\");\n    }\n  }\n};\n\nexport const Units = {\n  getMUnit: function(number: number): number {\n    if (number > 999) {\n      const string = number + \"\";\n      return parseInt(string.slice(string.length - 4, string.length - 3));\n    }\n    return 0;\n  },\n\n  getCUnit: function(number: number): number {\n    if (number > 99) {\n      const string = number + \"\";\n      return parseInt(string.slice(string.length - 3, string.length - 2));\n    }\n    return 0;\n  },\n\n  getXUnit: function(number: number): number {\n    if (number > 9) {\n      const string = number + \"\";\n      return parseInt(string.slice(string.length - 2, string.length - 1));\n    }\n    return 0;\n  }\n};\n\nexport const Mappers = {\n  getIs: function(number: number): string {\n    const map: { [key: number]: string } = {\n      1: \"I\",\n      2: \"II\",\n      3: \"III\",\n      4: \"IV\",\n      5: \"V\",\n      6: \"VI\",\n      7: \"VII\",\n      8: \"VIII\",\n      9: \"IX\"\n    };\n    Helpers.hasUnitError(number);\n    return map[number];\n  },\n\n  getXs: function(number: number): string {\n    const map: { [key: number]: string } = {\n      1: \"X\",\n      2: \"XX\",\n      3: \"XXX\",\n      4: \"XL\",\n      5: \"L\",\n      6: \"LX\",\n      7: \"LXX\",\n      8: \"LXXX\",\n      9: \"XC\"\n    };\n    Helpers.hasUnitError(number);\n    return map[number];\n  },\n\n  getCs: function(number: number): string {\n    const map: { [key: number]: string } = {\n      1: \"C\",\n      2: \"CC\",\n      3: \"CCC\",\n      4: \"CD\",\n      5: \"D\",\n      6: \"DC\",\n      7: \"DCC\",\n      8: \"DCCC\",\n      9: \"CM\"\n    };\n    Helpers.hasUnitError(number);\n    return map[number];\n  },\n\n  getMs: function(number: number): string {\n    const map: { [key: number]: string } = {\n      1: \"M\",\n      2: \"MM\",\n      3: \"MMM\",\n      4: \"MMMM\"\n    };\n    function hasError(number: number) {\n      Helpers.hasZeroOrBelowError(number);\n      if (number > 4) {\n        throw new Error(\"too big\");\n      }\n    }\n    hasError(number);\n    return map[number];\n  }\n};\n\nexport function getRoman(number: number): string {\n  function hasInputErrors(number: number): void {\n    Helpers.hasZeroOrBelowError(number);\n    if (number > 4999) {\n      throw new Error(\"Too big number\");\n    }\n  }\n  hasInputErrors(number);\n\n  let ms, cs, xs, is;\n  try {\n    ms = Mappers.getMs(Units.getMUnit(number));\n  } catch (_) {\n    ms = \"\";\n  }\n\n  try {\n    cs = Mappers.getCs(Units.getCUnit(number));\n  } catch (_) {\n    cs = \"\";\n  }\n\n  try {\n    xs = Mappers.getXs(Units.getXUnit(number));\n  } catch (_) {\n    xs = \"\";\n  }\n\n  try {\n    is = Mappers.getIs(number % 10);\n  } catch (_) {\n    is = \"\";\n  }\n\n  return `${ms}${cs}${xs}${is}`;\n}\n","import React, { Component } from \"react\";\nimport { getRoman } from \"./roman\";\n\nconst TEXT = \"Insert a value\";\n\nexport class Input extends Component {\n  state = { value: TEXT };\n  render() {\n    return (\n      <div>\n        <input\n          type=\"number\"\n          max=\"4999\"\n          min=\"1\"\n          autoFocus\n          onChange={event => {\n            try {\n              const value =\n                event.target.value === \"\"\n                  ? TEXT\n                  : getRoman(parseInt(event.target.value));\n              this.setState({\n                value\n              });\n            } catch (_) {\n              this.setState({ value: \"Wrong input value\" });\n            }\n          }}\n        />\n        <p>\n          <strong>Result: </strong>\n          {this.state.value}\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.scss\";\n\nimport { Input } from \"./Input\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Roman numerals</h2>\n      <p>Write any number from 0 to 4999.</p>\n      <Input />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}